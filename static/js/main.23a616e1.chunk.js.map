{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","background","color1","color2","children","App","state","setColor","bind","setColor1","this","onRequestRobots","event","setState","target","value","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","searchRobots","requestRobots","error","dispatch","payload","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","errorState","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.23a616e1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflow: \"scroll\",\n        border: \"5px solid black\",\n        height: \"800px\",\n        background: `linear-gradient(to right, ${props.color1}, ${props.color2})`,\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\n\nimport { requestRobots, setSearchField } from \"../actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color1: \"\",\n      color2: \"\",\n    };\n    this.setColor = this.setColor.bind(this);\n    this.setColor1 = this.setColor1.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  setColor(event) {\n    this.setState({ color1: event.target.value });\n  }\n\n  setColor1(event) {\n    this.setState({ color2: event.target.value });\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <input\n          type=\"color\"\n          name=\"color1\"\n          onChange={this.setColor}\n          value=\"#ffffff\"\n        />\n        <input\n          type=\"color\"\n          name=\"color1\"\n          onChange={this.setColor1}\n          value=\"#ffffff\"\n        />\n        <Scroll color1={this.state.color1} color2={this.state.color2}>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING,\n  });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) =>\n      dispatch({\n        type: REQUEST_ROBOTS_SUCCESS,\n        payload: data,\n      })\n    )\n    .catch((err) =>\n      dispatch({\n        type: REQUEST_ROBOTS_FAILED,\n        payload: err,\n      })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: true,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        isPending: false,\n        robots: action.payload,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        isPending: false,\n        errorState: action.payload,\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}